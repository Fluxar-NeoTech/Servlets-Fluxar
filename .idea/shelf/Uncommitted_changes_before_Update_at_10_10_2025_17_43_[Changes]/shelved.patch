Index: src/main/java/dao/UnidadeDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport model.Funcionario;\r\nimport model.Unidade;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class UnidadeDAO {\r\n    public static List<Unidade> listar(){\r\n//        Declarando variáveis:\r\n        String sql = \"SELECT * FROM unidade\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n        Unidade unidade;\r\n        List<Unidade> unidades = new ArrayList<Unidade>();\r\n\r\n//        Conectando ao banco de dados e enviando sql:\r\n        try {\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Criando objetos e adicionando a lista das unidades:\r\n            while (rs.next()) {\r\n                unidade = new Unidade(rs.getInt(\"id\"), rs.getString(\"nome\"),rs.getInt(\"numero\"),rs.getString(\"cep\"),rs.getString(\"referencia\"),rs.getString(\"descricao\"),rs.getInt(\"id_empresa\"));\r\n                unidades.add(unidade);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Erro ao conectar ao banco de dados\");\r\n        }\r\n\r\n//        Retornando as unidades cadastradas:\r\n        return unidades;\r\n    }\r\n\r\n    public static List<Unidade> listarPorEmpresa(int codigo){\r\n//        Declarando variáveis:\r\n        String sql = \"SELECT * FROM unidade WHERE id_empresa = ?\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n        Unidade unidade;\r\n        List<Unidade> unidades = new ArrayList<Unidade>();\r\n\r\n//        Conectando ao banco de dados:\r\n        try{\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setInt(1,codigo);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Coletando dados:\r\n            while (rs.next()) {\r\n                unidade = new Unidade(rs.getInt(\"id\"), rs.getString(\"nome\"),rs.getInt(\"numero\"),rs.getString(\"cep\"),rs.getString(\"referencia\"),rs.getString(\"descricao\"),rs.getInt(\"id_empresa\"));\r\n                unidades.add(unidade);\r\n            }\r\n\r\n        }catch (SQLException sqle){\r\n            throw new RuntimeException(\"Erro ao conectar no banco de dados\");\r\n        }\r\n\r\n        return unidades;\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/dao/UnidadeDAO.java b/src/main/java/dao/UnidadeDAO.java
--- a/src/main/java/dao/UnidadeDAO.java	
+++ b/src/main/java/dao/UnidadeDAO.java	
@@ -1,6 +1,6 @@
 package dao;
 
-import model.Funcionario;
+import connection.Conexao;
 import model.Unidade;
 
 import java.sql.Connection;
Index: src/main/java/dao/PlanoDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport model.Plano;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PlanoDAO {\r\n//    Criando método para listar os planos:\r\n    public static List<Plano> listar(){\r\n//        Declarando variáveis:\r\n        String sql = \"SELECT * FROM plano\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n        Plano plano;\r\n        List<Plano> planos = new ArrayList<Plano>();\r\n\r\n//        Conectando ao banco de dados e enviando sql:\r\n        try{\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Criando objetos e adicionando a lista planos:\r\n            while (rs.next()){\r\n                plano = new Plano(rs.getInt(\"id\"), rs.getString(\"nome\"), rs.getDouble(\"preco\"),rs.getInt(\"duracao\"));\r\n                planos.add(plano);\r\n            }\r\n\r\n        }catch (Exception e){\r\n            throw new RuntimeException(\"Erro ao conectar ao banco de dados\");\r\n        }\r\n\r\n//        Retornando planos cadastrados:\r\n        return planos;\r\n    }\r\n\r\n    public static Plano buscarPlanoPeloId(int id){\r\n//        Declarando variáveis:\r\n        String sql = \"SELECT * FROM plano WHERE id = ?\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n        Plano plano;\r\n        List<Plano> planos = new ArrayList<Plano>();\r\n\r\n//        Conectando ao banco de dados e enviando sql:\r\n        try{\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setInt(1,id);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Verificando se há um plano com esse id:\r\n            if(rs.next()){\r\n\r\n//                Retornando plano encontrado:\r\n                return new Plano(rs.getInt(\"id\"), rs.getString(\"nome\"), rs.getDouble(\"preco\"),rs.getInt(\"duracao\"));\r\n            }\r\n\r\n        }catch (Exception e){\r\n            throw new RuntimeException(\"Erro ao conectar ao banco de dados\");\r\n        }\r\n        return null;\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/dao/PlanoDAO.java b/src/main/java/dao/PlanoDAO.java
--- a/src/main/java/dao/PlanoDAO.java	
+++ b/src/main/java/dao/PlanoDAO.java	
@@ -1,5 +1,6 @@
 package dao;
 
+import connection.Conexao;
 import model.Plano;
 
 import java.sql.Connection;
Index: src/main/java/dao/Conexao.java
===================================================================
diff --git a/src/main/java/dao/Conexao.java b/src/main/java/connection/Conexao.java
rename from src/main/java/dao/Conexao.java
rename to src/main/java/connection/Conexao.java
--- a/src/main/java/dao/Conexao.java	
+++ b/src/main/java/connection/Conexao.java	
@@ -1,4 +1,4 @@
-package dao;
+package connection;
 
 import io.github.cdimascio.dotenv.Dotenv;
 import model.Plano;
@@ -26,14 +26,13 @@
             throw new RuntimeException(e);
         }
     }
-
     public static void desconectar(Connection conn){
         try{
             if(conn!=null&&!conn.isClosed()){
                 conn.close();
             }
         }catch (SQLException sqle){
-            throw new RuntimeException("Erro ao fechar conecção");
+            throw new RuntimeException("Erro ao fechar conexão");
         }
     }
 }
\ No newline at end of file
Index: src/main/java/dao/AvaliacaoDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport model.Avaliacao;\r\nimport model.Empresa;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class AvaliacaoDAO {\r\n    public static List<Avaliacao> listar() {\r\n//        Declaração de variáveis:\r\n        String sql = \"SELECT * FROM avaliacao\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n        Avaliacao avaliacao;\r\n        List<Avaliacao> avaliacaos = new ArrayList<Avaliacao>();\r\n\r\n//        Conectando ao banco de dados:\r\n        try {\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                avaliacao = new Avaliacao(rs.getInt(\"id\"), rs.getString(\"comentarios\"),rs.getInt(\"nota\"), rs.getString(\"email\"), rs.getDate(\"data\"));\r\n                avaliacaos.add(avaliacao);\r\n            }\r\n\r\n        } catch (SQLException sqle) {\r\n            throw new RuntimeException(\"Erro ao conectar ao banco de dados\");\r\n        }\r\n\r\n        return avaliacaos;\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/dao/AvaliacaoDAO.java b/src/main/java/dao/AvaliacaoDAO.java
--- a/src/main/java/dao/AvaliacaoDAO.java	
+++ b/src/main/java/dao/AvaliacaoDAO.java	
@@ -1,7 +1,7 @@
 package dao;
 
+import connection.Conexao;
 import model.Avaliacao;
-import model.Empresa;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
Index: src/main/java/dao/AdministradorDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport model.Administrador;\r\nimport model.Funcionario;\r\nimport org.mindrot.jbcrypt.BCrypt;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class AdministradorDAO {\r\n    public static List<Administrador> listarAdministradores() {\r\n//        Declarando variáveis:\r\n        String sql = \"SELECT * FROM administrador\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n        Administrador administrador;\r\n        List<Administrador> administradores = new ArrayList<Administrador>();\r\n\r\n//        Conectando ao banco de dados e enviando sql:\r\n        try {\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Criando objetos e adicionando a lista dos funcionários:\r\n            while (rs.next()) {\r\n                administrador = new Administrador(rs.getInt(\"id\"),rs.getString(\"nome\"),rs.getString(\"email\"),rs.getString(\"senha\"));\r\n                administradores.add(administrador);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Erro ao conectar ao banco de dados\");\r\n        }\r\n\r\n        Conexao.desconectar(conn);\r\n\r\n//        Retornando os funcionários cadastrados:\r\n        return administradores;\r\n    }\r\n\r\n    public static boolean verificarCampo(String campo, String valor){\r\n//        Declaração de variáveis:\r\n        String sql = \"SELECT * FROM administrador WHERE ? = ?\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n\r\n//        Conectando ao banco de dados:\r\n        try{\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1,campo);\r\n            pstmt.setString(2,valor);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Verificando se há um retorno com um registro do banco de dados:\r\n            if(rs.next()){\r\n                Conexao.desconectar(conn);\r\n                return true;\r\n            }\r\n\r\n        }catch (SQLException sqle){\r\n            throw new RuntimeException(\"Ocorreu um erro ao acessar o banco de dados.\");\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static Administrador buscarAdministrador(String campo, String valor){\r\n//        Declaração de variáveis:\r\n        String sql = \"SELECT * FROM funcionario WHERE ? = ?\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n\r\n//        Conectando ao banco de dados:\r\n        try{\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1,campo);\r\n            pstmt.setString(2,valor);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Verificando se há um retorno com um registro do banco de dados:\r\n            if(rs.next()){\r\n                return new Administrador(rs.getInt(\"id\"),rs.getString(\"nome\"),rs.getString(\"email\"),rs.getString(\"senha\"));\r\n            }\r\n\r\n        }catch (SQLException sqle){\r\n            throw new RuntimeException(\"Ocorreu um erro ao acessar o banco de dados.\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static boolean autenticar(String email, String senha){\r\n//        Declaração de variáveis:\r\n        String sql = \"SELECT * FROM administrador WHERE email = ?\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n\r\n//        Conectando ao banco de dados:\r\n        try{\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1,email);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Verificando se há um retorno com um registro do banco de dados:\r\n            if(rs.next()){\r\n                if(BCrypt.checkpw(senha,rs.getString(\"senha\"))){\r\n                    return true;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n\r\n        }catch (SQLException sqle){\r\n            throw new RuntimeException(\"Ocorreu um erro ao acessar o banco de dados.\");\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/dao/AdministradorDAO.java b/src/main/java/dao/AdministradorDAO.java
--- a/src/main/java/dao/AdministradorDAO.java	
+++ b/src/main/java/dao/AdministradorDAO.java	
@@ -1,7 +1,7 @@
 package dao;
 
+import connection.Conexao;
 import model.Administrador;
-import model.Funcionario;
 import org.mindrot.jbcrypt.BCrypt;
 
 import java.sql.Connection;
Index: src/main/java/dao/FuncionarioDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport model.Empresa;\r\nimport model.Funcionario;\r\nimport org.mindrot.jbcrypt.BCrypt;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class FuncionarioDAO {\r\n    public static List<Funcionario> listarFuncionarios() {\r\n//        Declarando variáveis:\r\n        String sql = \"SELECT * FROM funcionario\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n        Funcionario funcionario;\r\n        List<Funcionario> funcionarios = new ArrayList<Funcionario>();\r\n\r\n//        Conectando ao banco de dados e enviando sql:\r\n        try {\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Criando objetos e adicionando a lista dos funcionários:\r\n            while (rs.next()) {\r\n                funcionario = new Funcionario(rs.getInt(\"id\"),rs.getString(\"nome\"),rs.getString(\"sobrenome\"), rs.getString(\"data_nasc\"), rs.getString(\"telefone\"),rs.getString(\"senha\"),rs.getString(\"email\"),rs.getString(\"cargo\"),rs.getInt(\"id_setor\"));\r\n                funcionarios.add(funcionario);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Erro ao conectar ao banco de dados\");\r\n        }\r\n\r\n        Conexao.desconectar(conn);\r\n\r\n//        Retornando os funcionários cadastrados:\r\n        return funcionarios;\r\n    }\r\n\r\n    public static List<Funcionario> listarFuncionarioPorEmpresa(int codigo) {\r\n//        Declarando variáveis:\r\n        String sql = \"SELECT * FROM funcionario f JOIN setor s ON s.id=f.id_setor JOIN unidade u ON u.id=s.id_unidade JOIN empresa e ON e.id=u.id_empresa WHERE e.id = ? \";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n        Funcionario funcionario;\r\n        List<Funcionario> funcionarios = new ArrayList<Funcionario>();\r\n\r\n//        Conectando ao banco de dados e enviando sql:\r\n        try {\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setInt(1,codigo);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Criando objetos e adicionando a lista dos funcionários:\r\n            while (rs.next()) {\r\n                funcionario = new Funcionario(rs.getInt(\"id\"),rs.getString(\"nome\"),rs.getString(\"sobrenome\"), rs.getString(\"data_nasc\"), rs.getString(\"telefone\"),rs.getString(\"senha\"),rs.getString(\"email\"),rs.getString(\"cargo\"),rs.getInt(\"id_setor\"));\r\n                funcionarios.add(funcionario);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Erro ao conectar ao banco de dados\");\r\n        }\r\n\r\n        Conexao.desconectar(conn);\r\n\r\n//        Retornando os funcionários cadastrados:\r\n        return funcionarios;\r\n    }\r\n\r\n    public static boolean verificarCampo(String campo, String valor){\r\n//        Declaração de variáveis:\r\n        String sql = \"SELECT * FROM funcionario WHERE \"+campo+\" = ?\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n\r\n//        Conectando ao banco de dados:\r\n        try{\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1,valor);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Verificando se há um retorno com um registro do banco de dados:\r\n            if(rs.next()){\r\n                Conexao.desconectar(conn);\r\n                return true;\r\n            }\r\n\r\n        }catch (SQLException sqle){\r\n            throw new RuntimeException(\"Ocorreu um erro ao acessar o banco de dados.\");\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static Funcionario buscarFuncionario(String campo, String valor){\r\n//        Declaração de variáveis:\r\n        String sql = \"SELECT * FROM funcionario WHERE \"+campo+\" = ?\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n\r\n//        Conectando ao banco de dados:\r\n        try{\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1,valor);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Verificando se há um retorno com um registro do banco de dados:\r\n            if(rs.next()){\r\n                return new Funcionario(rs.getInt(\"id\"),rs.getString(\"nome\"),rs.getString(\"sobrenome\"), rs.getString(\"data_nasc\"), rs.getString(\"telefone\"),rs.getString(\"senha\"),rs.getString(\"email\"),rs.getString(\"cargo\"),rs.getInt(\"id_unidade\"));\r\n            }\r\n\r\n        }catch (SQLException sqle){\r\n            throw new RuntimeException(\"Ocorreu um erro ao acessar o banco de dados.\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static boolean autenticar(String email, String senha){\r\n//        Declaração de variáveis:\r\n        String sql = \"SELECT * FROM funcionario WHERE email = ?\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n\r\n//        Conectando ao banco de dados:\r\n        try{\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1,email);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Verificando se há um retorno com um registro do banco de dados:\r\n            if(rs.next()){\r\n                if(BCrypt.checkpw(senha,rs.getString(\"senha\"))){\r\n                    return true;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n\r\n        }catch (SQLException sqle){\r\n            throw new RuntimeException(\"Ocorreu um erro ao acessar o banco de dados.\");\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/dao/FuncionarioDAO.java b/src/main/java/dao/FuncionarioDAO.java
--- a/src/main/java/dao/FuncionarioDAO.java	
+++ b/src/main/java/dao/FuncionarioDAO.java	
@@ -1,6 +1,6 @@
 package dao;
 
-import model.Empresa;
+import connection.Conexao;
 import model.Funcionario;
 import org.mindrot.jbcrypt.BCrypt;
 
Index: src/main/java/dao/EmpresaDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport model.Empresa;\r\nimport model.Plano;\r\nimport org.mindrot.jbcrypt.BCrypt;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n// Lista a fazer para bloquear SQLInjection;\r\n// Não permitir ;\r\n//\r\npublic class EmpresaDAO {\r\n    public static List<Empresa> listar() {\r\n        //        Declarando variáveis:\r\n        String sql = \"SELECT * FROM empresa\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n        Empresa empresa;\r\n        List<Empresa> empresas = new ArrayList<Empresa>();\r\n\r\n//        Conectando ao banco de dados e enviando sql:\r\n        try {\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Criando objetos e adicionando a lista das empresas:\r\n            while (rs.next()) {\r\n                empresa = new Empresa(rs.getInt(\"id\"), rs.getString(\"status\"), rs.getDate(\"dt_inicio\"), rs.getString(\"cnpj\"), rs.getString(\"senha\"), rs.getString(\"nome\"), rs.getString(\"email\"), rs.getInt(\"id_plano\"));\r\n                empresas.add(empresa);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Erro ao conectar ao banco de dados\");\r\n        }\r\n\r\n//        Retornando as empresas cadastradas:\r\n        return empresas;\r\n    }\r\n\r\n    public static boolean verificarCampo(String campo, String valor) {\r\n//        Declaração de variáveis:\r\n        String sql = \"SELECT * FROM empresa WHERE \" + campo + \" = ?\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n\r\n//        Conectando ao banco de dados:\r\n        try {\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1, valor);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Verificando se há um retorno com um registro do banco de dados:\r\n            if (rs.next()) {\r\n                return true;\r\n            }\r\n\r\n        } catch (SQLException sqle) {\r\n            throw new RuntimeException(\"Ocorreu um erro ao acessar o banco de dados.\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static Empresa buscarEmpresa(String campo, String valor) {\r\n//        Declaração de variáveis:\r\n        String sql = \"SELECT * FROM empresa WHERE \" + campo + \" = ?\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n\r\n//        Conectando ao banco de dados:\r\n        try {\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1, valor);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Verificando se há um retorno com um registro do banco de dados:\r\n            if (rs.next()) {\r\n                return new Empresa(rs.getInt(\"id\"), rs.getString(\"status\"), rs.getDate(\"dt_inicio\"), rs.getString(\"cnpj\"), rs.getString(\"senha\"), rs.getString(\"nome\"), rs.getString(\"email\"), rs.getInt(\"id_plano\"));\r\n            }\r\n\r\n        } catch (SQLException sqle) {\r\n            throw new RuntimeException(\"Ocorreu um erro ao acessar o banco de dados.\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static boolean autenticar(String email, String senha) {\r\n//        Declaração de variáveis:\r\n        String sql = \"SELECT * FROM empresa WHERE email = ?\";\r\n        Connection conn = null;\r\n        PreparedStatement pstmt;\r\n        ResultSet rs;\r\n\r\n//        Conectando ao banco de dados:\r\n        try {\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1, email);\r\n            rs = pstmt.executeQuery();\r\n\r\n//            Verificando se há um retorno com um registro do banco de dados:\r\n            if (rs.next()) {\r\n                if (BCrypt.checkpw(senha, rs.getString(\"senha\"))) {\r\n                    Conexao.desconectar(conn);\r\n                    return true;\r\n                }\r\n            } else {\r\n                return false;\r\n            }\r\n\r\n        } catch (SQLException sqle) {\r\n            return false;\r\n        } finally {\r\n            Conexao.desconectar(conn);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static  boolean cadastrarEmpresa(Empresa empresa){\r\n        //        Declaração de variáveis:\r\n        String sql = \"INSERT INTO empresa (dt_inicio, cnpj, senha, nome, email, id_plano) VALUES (?, ?, ?, ?,?, ?)\";\r\n        Connection conn;\r\n        PreparedStatement pstmt;\r\n        int linhasAfetadas;\r\n\r\n//        Conectando ao banco de dados:\r\n        try{\r\n            conn = Conexao.conectar();\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setDate(1,empresa.getDt_inicio());\r\n            pstmt.setString(2,empresa.getCnpj());\r\n            pstmt.setString(3,empresa.getSenha());\r\n            pstmt.setString(4,empresa.getNome());\r\n            pstmt.setString(5,empresa.getEmail());\r\n            pstmt.setInt(6,empresa.getId_plano());\r\n\r\n            linhasAfetadas = pstmt.executeUpdate();\r\n\r\n            return linhasAfetadas>0;\r\n\r\n        }catch (SQLException sqle){\r\n            throw new RuntimeException(\"Ocorreu um erro ao acessar o banco de dados.\");\r\n        }\r\n    }\r\n\r\n    public static boolean alterarSenha(String email, String novaSenha) {\r\n        // Declaração de variáveis\r\n        String sql;\r\n        Connection conn;\r\n        PreparedStatement pstm;\r\n        int linhas;\r\n\r\n        // Comando SQL para atualizar a senha do admin da empresa\r\n        sql = \"UPDATE empresa SET senha = ? WHERE email = ?\";\r\n\r\n        try {\r\n            // Obtenção da conexão com o banco de dados\r\n            conn = Conexao.conectar();\r\n\r\n            // Preparação do comando SQL\r\n            pstm = conn.prepareStatement(sql);\r\n            pstm.setString(1,novaSenha);\r\n            pstm.setString(2,email);\r\n\r\n            // Execução da atualização\r\n            linhas = pstm.executeUpdate();\r\n\r\n            return linhas>0;\r\n\r\n        } catch (SQLException e) {\r\n            return false;\r\n        }\r\n    }\r\n}
===================================================================
diff --git a/src/main/java/dao/EmpresaDAO.java b/src/main/java/dao/EmpresaDAO.java
--- a/src/main/java/dao/EmpresaDAO.java	
+++ b/src/main/java/dao/EmpresaDAO.java	
@@ -1,7 +1,7 @@
 package dao;
 
+import connection.Conexao;
 import model.Empresa;
-import model.Plano;
 import org.mindrot.jbcrypt.BCrypt;
 
 import java.sql.Connection;
